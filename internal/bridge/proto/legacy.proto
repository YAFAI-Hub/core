syntax = "proto3";

option go_package = ".;link";

package link;

//--------------------------------------------------------------------//

service OrchestratorService {
  rpc SubmitTask(TaskRequest) returns (TaskResponse); // Client/Agent sends this, Orchestrator replies with acknowledgement.
  rpc GetTaskStatus(TaskStatusRequest) returns (TaskStatusResponse); // Client sends this, Orchestrator replies.
  rpc StreamTaskUpdates(TaskUpdateRequest) returns (stream TaskUpdate); // Client sends this, Orchestrator sends a stream of replies.
  rpc ReportAgentStatus(AgentStatusRequest) returns (stream AgentStatusResponse); // Agents send this, Orchestrator replies.
  rpc ListAgents(ListAgentsRequest) returns (ListAgentsResponse); // Client sends this, Orchestrator replies.
}

message TaskRequest {
  string taskId = 1;
  string taskDescription = 2;
}

message TaskResponse {
  string taskId = 1;
  string status = 2; // "ACCEPTED", "QUEUED", "IN_PROGRESS", "COMPLETED", "FAILED"
  string message = 3; // Optional message (e.g., "Task accepted and queued")
  string taskResult = 4; // Only populated when task is completed or failed.
}

message TaskStatusRequest {
  string taskId = 1;
}

message TaskStatusResponse {
  string taskId = 1;
  string status = 2; // "ACCEPTED", "QUEUED", "IN_PROGRESS", "COMPLETED", "FAILED"
  string taskResult = 3; // Only populated when task is completed or failed.
  string message = 4; // optional message.
}

message TaskUpdateRequest {
  string taskId = 1;
}

message TaskUpdate {
  string taskId = 1;
  string updateMessage = 2;
}

message AgentStatusRequest {
  string agentId = 1;
  string taskId = 2;
  string status = 3;
  string message = 4;
}

message AgentStatusResponse {
  string agentId = 1;
  string taskId = 2;
  string status = 3;
  string message = 4;
}
message ListAgentsRequest {}

message ListAgentsResponse {
  repeated AgentInfo agentList = 1;
}

message AgentInfo {
  string agentId = 1;
  string agentType = 2;
  map<string, string> agentMetadata = 3;
  repeated string toolList = 4;
}

//--------------------------------------------------------------------//

service AgentService {
  rpc RegisterAgent(RegisterAgentRequest) returns (RegisterAgentResponse); // Agents send this, Orchestrator replies.
  rpc ExecuteTask(AgentTaskRequest) returns (AgentTaskResponse); // Orchestrator sends this, Agents reply.
  rpc AgentHealthCheck(HealthCheckRequest) returns (HealthCheckResponse); // Orchestrator sends this, Agents reply.
}

message RegisterAgentRequest {
  AgentInfo agentInfo = 1;
}

message RegisterAgentResponse {
  bool success = 1;
  string message = 2;
}

message AgentTaskRequest {
  string taskId = 1;
  string agentId = 2;
  string taskInstructions = 3;
  repeated ToolCall toolCalls = 4;
  string agentBConnectionDetails = 5; // connection info for agent to agent communication
}

message ToolCall {
  string toolName = 1;
  map<string, string> toolParameters = 2;
}

message AgentTaskResponse {
  string taskId = 1;
  string taskResult = 2;
  repeated ToolCallResult toolCallResults = 3;
}

message ToolCallResult {
  string toolName = 1;
  string toolOutput = 2;
}

message HealthCheckRequest {
  string agentId = 1;
}

message HealthCheckResponse {
  bool isHealthy = 1;
  string message = 2;
}

//--------------------------------------------------------------------//

service ClientService {
  rpc SubmitClientTask (ClientTaskRequest) returns (stream ClientTaskResponse); // Client sends this, Orchestrator replies.
}

message ClientTaskRequest {
  string taskId = 1;
  string taskDescription = 2;
}

message ClientTaskResponse {
  string taskId = 1;
  string taskResult = 2;
  string status = 3;
}

//--------------------------------------------------------------------//