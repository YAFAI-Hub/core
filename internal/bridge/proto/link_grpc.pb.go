// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: internal/bridge/proto/link.proto

package link

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChatService_ChatStream_FullMethodName = "/link.ChatService/ChatStream"
)

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	ChatStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChatRequest, ChatResponse], error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) ChatStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChatRequest, ChatResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[0], ChatService_ChatStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatRequest, ChatResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_ChatStreamClient = grpc.BidiStreamingClient[ChatRequest, ChatResponse]

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility.
type ChatServiceServer interface {
	ChatStream(grpc.BidiStreamingServer[ChatRequest, ChatResponse]) error
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChatServiceServer struct{}

func (UnimplementedChatServiceServer) ChatStream(grpc.BidiStreamingServer[ChatRequest, ChatResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ChatStream not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}
func (UnimplementedChatServiceServer) testEmbeddedByValue()                     {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	// If the following call pancis, it indicates UnimplementedChatServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_ChatStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).ChatStream(&grpc.GenericServerStream[ChatRequest, ChatResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_ChatStreamServer = grpc.BidiStreamingServer[ChatRequest, ChatResponse]

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "link.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChatStream",
			Handler:       _ChatService_ChatStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/bridge/proto/link.proto",
}

const (
	Planner_InvokePlanner_FullMethodName    = "/link.Planner/InvokePlanner"
	Planner_InvokePlanRefine_FullMethodName = "/link.Planner/InvokePlanRefine"
)

// PlannerClient is the client API for Planner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlannerClient interface {
	InvokePlanner(ctx context.Context, in *PlannerRequest, opts ...grpc.CallOption) (*PlannerResponse, error)
	InvokePlanRefine(ctx context.Context, in *PlannerRefineRequest, opts ...grpc.CallOption) (*PlannerResponse, error)
}

type plannerClient struct {
	cc grpc.ClientConnInterface
}

func NewPlannerClient(cc grpc.ClientConnInterface) PlannerClient {
	return &plannerClient{cc}
}

func (c *plannerClient) InvokePlanner(ctx context.Context, in *PlannerRequest, opts ...grpc.CallOption) (*PlannerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlannerResponse)
	err := c.cc.Invoke(ctx, Planner_InvokePlanner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plannerClient) InvokePlanRefine(ctx context.Context, in *PlannerRefineRequest, opts ...grpc.CallOption) (*PlannerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlannerResponse)
	err := c.cc.Invoke(ctx, Planner_InvokePlanRefine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlannerServer is the server API for Planner service.
// All implementations must embed UnimplementedPlannerServer
// for forward compatibility.
type PlannerServer interface {
	InvokePlanner(context.Context, *PlannerRequest) (*PlannerResponse, error)
	InvokePlanRefine(context.Context, *PlannerRefineRequest) (*PlannerResponse, error)
	mustEmbedUnimplementedPlannerServer()
}

// UnimplementedPlannerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPlannerServer struct{}

func (UnimplementedPlannerServer) InvokePlanner(context.Context, *PlannerRequest) (*PlannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokePlanner not implemented")
}
func (UnimplementedPlannerServer) InvokePlanRefine(context.Context, *PlannerRefineRequest) (*PlannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokePlanRefine not implemented")
}
func (UnimplementedPlannerServer) mustEmbedUnimplementedPlannerServer() {}
func (UnimplementedPlannerServer) testEmbeddedByValue()                 {}

// UnsafePlannerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlannerServer will
// result in compilation errors.
type UnsafePlannerServer interface {
	mustEmbedUnimplementedPlannerServer()
}

func RegisterPlannerServer(s grpc.ServiceRegistrar, srv PlannerServer) {
	// If the following call pancis, it indicates UnimplementedPlannerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Planner_ServiceDesc, srv)
}

func _Planner_InvokePlanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlannerServer).InvokePlanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Planner_InvokePlanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlannerServer).InvokePlanner(ctx, req.(*PlannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Planner_InvokePlanRefine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlannerRefineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlannerServer).InvokePlanRefine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Planner_InvokePlanRefine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlannerServer).InvokePlanRefine(ctx, req.(*PlannerRefineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Planner_ServiceDesc is the grpc.ServiceDesc for Planner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Planner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "link.Planner",
	HandlerType: (*PlannerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InvokePlanner",
			Handler:    _Planner_InvokePlanner_Handler,
		},
		{
			MethodName: "InvokePlanRefine",
			Handler:    _Planner_InvokePlanRefine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/bridge/proto/link.proto",
}

const (
	Orchestrator_InvokeOrchestrator_FullMethodName    = "/link.Orchestrator/InvokeOrchestrator"
	Orchestrator_InvokeAgent_FullMethodName           = "/link.Orchestrator/InvokeAgent"
	Orchestrator_MonitorAgentExecution_FullMethodName = "/link.Orchestrator/MonitorAgentExecution"
)

// OrchestratorClient is the client API for Orchestrator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrchestratorClient interface {
	InvokeOrchestrator(ctx context.Context, in *OrchestratorRequest, opts ...grpc.CallOption) (*OrchestratorResponse, error)
	InvokeAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentResponse, error)
	MonitorAgentExecution(ctx context.Context, in *MonitorAgentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MonitorAgentResponse], error)
}

type orchestratorClient struct {
	cc grpc.ClientConnInterface
}

func NewOrchestratorClient(cc grpc.ClientConnInterface) OrchestratorClient {
	return &orchestratorClient{cc}
}

func (c *orchestratorClient) InvokeOrchestrator(ctx context.Context, in *OrchestratorRequest, opts ...grpc.CallOption) (*OrchestratorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrchestratorResponse)
	err := c.cc.Invoke(ctx, Orchestrator_InvokeOrchestrator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) InvokeAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentResponse)
	err := c.cc.Invoke(ctx, Orchestrator_InvokeAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) MonitorAgentExecution(ctx context.Context, in *MonitorAgentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MonitorAgentResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Orchestrator_ServiceDesc.Streams[0], Orchestrator_MonitorAgentExecution_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MonitorAgentRequest, MonitorAgentResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Orchestrator_MonitorAgentExecutionClient = grpc.ServerStreamingClient[MonitorAgentResponse]

// OrchestratorServer is the server API for Orchestrator service.
// All implementations must embed UnimplementedOrchestratorServer
// for forward compatibility.
type OrchestratorServer interface {
	InvokeOrchestrator(context.Context, *OrchestratorRequest) (*OrchestratorResponse, error)
	InvokeAgent(context.Context, *AgentRequest) (*AgentResponse, error)
	MonitorAgentExecution(*MonitorAgentRequest, grpc.ServerStreamingServer[MonitorAgentResponse]) error
	mustEmbedUnimplementedOrchestratorServer()
}

// UnimplementedOrchestratorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrchestratorServer struct{}

func (UnimplementedOrchestratorServer) InvokeOrchestrator(context.Context, *OrchestratorRequest) (*OrchestratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokeOrchestrator not implemented")
}
func (UnimplementedOrchestratorServer) InvokeAgent(context.Context, *AgentRequest) (*AgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokeAgent not implemented")
}
func (UnimplementedOrchestratorServer) MonitorAgentExecution(*MonitorAgentRequest, grpc.ServerStreamingServer[MonitorAgentResponse]) error {
	return status.Errorf(codes.Unimplemented, "method MonitorAgentExecution not implemented")
}
func (UnimplementedOrchestratorServer) mustEmbedUnimplementedOrchestratorServer() {}
func (UnimplementedOrchestratorServer) testEmbeddedByValue()                      {}

// UnsafeOrchestratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrchestratorServer will
// result in compilation errors.
type UnsafeOrchestratorServer interface {
	mustEmbedUnimplementedOrchestratorServer()
}

func RegisterOrchestratorServer(s grpc.ServiceRegistrar, srv OrchestratorServer) {
	// If the following call pancis, it indicates UnimplementedOrchestratorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Orchestrator_ServiceDesc, srv)
}

func _Orchestrator_InvokeOrchestrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrchestratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).InvokeOrchestrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orchestrator_InvokeOrchestrator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).InvokeOrchestrator(ctx, req.(*OrchestratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_InvokeAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).InvokeAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orchestrator_InvokeAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).InvokeAgent(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_MonitorAgentExecution_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MonitorAgentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrchestratorServer).MonitorAgentExecution(m, &grpc.GenericServerStream[MonitorAgentRequest, MonitorAgentResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Orchestrator_MonitorAgentExecutionServer = grpc.ServerStreamingServer[MonitorAgentResponse]

// Orchestrator_ServiceDesc is the grpc.ServiceDesc for Orchestrator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Orchestrator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "link.Orchestrator",
	HandlerType: (*OrchestratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InvokeOrchestrator",
			Handler:    _Orchestrator_InvokeOrchestrator_Handler,
		},
		{
			MethodName: "InvokeAgent",
			Handler:    _Orchestrator_InvokeAgent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MonitorAgentExecution",
			Handler:       _Orchestrator_MonitorAgentExecution_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/bridge/proto/link.proto",
}

const (
	Agent_ExecuteAgent_FullMethodName  = "/link.Agent/ExecuteAgent"
	Agent_ToolDiscovery_FullMethodName = "/link.Agent/ToolDiscovery"
	Agent_ToolExecute_FullMethodName   = "/link.Agent/ToolExecute"
)

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	ExecuteAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentResponse, error)
	ToolDiscovery(ctx context.Context, in *DiscoveryRequest, opts ...grpc.CallOption) (*DiscoveryResponse, error)
	ToolExecute(ctx context.Context, in *ToolExecuteRequest, opts ...grpc.CallOption) (*ToolExecuteResponse, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) ExecuteAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentResponse)
	err := c.cc.Invoke(ctx, Agent_ExecuteAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) ToolDiscovery(ctx context.Context, in *DiscoveryRequest, opts ...grpc.CallOption) (*DiscoveryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiscoveryResponse)
	err := c.cc.Invoke(ctx, Agent_ToolDiscovery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) ToolExecute(ctx context.Context, in *ToolExecuteRequest, opts ...grpc.CallOption) (*ToolExecuteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToolExecuteResponse)
	err := c.cc.Invoke(ctx, Agent_ToolExecute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility.
type AgentServer interface {
	ExecuteAgent(context.Context, *AgentRequest) (*AgentResponse, error)
	ToolDiscovery(context.Context, *DiscoveryRequest) (*DiscoveryResponse, error)
	ToolExecute(context.Context, *ToolExecuteRequest) (*ToolExecuteResponse, error)
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentServer struct{}

func (UnimplementedAgentServer) ExecuteAgent(context.Context, *AgentRequest) (*AgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAgent not implemented")
}
func (UnimplementedAgentServer) ToolDiscovery(context.Context, *DiscoveryRequest) (*DiscoveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToolDiscovery not implemented")
}
func (UnimplementedAgentServer) ToolExecute(context.Context, *ToolExecuteRequest) (*ToolExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToolExecute not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}
func (UnimplementedAgentServer) testEmbeddedByValue()               {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	// If the following call pancis, it indicates UnimplementedAgentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_ExecuteAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).ExecuteAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_ExecuteAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).ExecuteAgent(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_ToolDiscovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).ToolDiscovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_ToolDiscovery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).ToolDiscovery(ctx, req.(*DiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_ToolExecute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToolExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).ToolExecute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_ToolExecute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).ToolExecute(ctx, req.(*ToolExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "link.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteAgent",
			Handler:    _Agent_ExecuteAgent_Handler,
		},
		{
			MethodName: "ToolDiscovery",
			Handler:    _Agent_ToolDiscovery_Handler,
		},
		{
			MethodName: "ToolExecute",
			Handler:    _Agent_ToolExecute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/bridge/proto/link.proto",
}
